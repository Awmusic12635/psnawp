<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="68" time="5.460" timestamp="2022-12-16T05:48:33.370965" hostname="fv-az576-128"><testcase classname="tests.unit_tests.test_authenticator" name="test_authenticator__access_token_from_refresh_token" time="0.092" /><testcase classname="tests.unit_tests.test_client" name="test_client__authentication" time="0.044" /><testcase classname="tests.unit_tests.test_client" name="test_client__incorrect_npsso" time="0.035" /><testcase classname="tests.unit_tests.test_client" name="test_client__online_id" time="0.873" /><testcase classname="tests.unit_tests.test_client" name="test_client__account_id" time="0.026" /><testcase classname="tests.unit_tests.test_client" name="test_client__get_profile_legacy" time="0.050" /><testcase classname="tests.unit_tests.test_client" name="test_client__account_devices" time="0.026" /><testcase classname="tests.unit_tests.test_client" name="test_client__get_friends" time="0.428" /><testcase classname="tests.unit_tests.test_client" name="test_client__get_groups" time="0.146" /><testcase classname="tests.unit_tests.test_client" name="test_client__available_to_play" time="0.050" /><testcase classname="tests.unit_tests.test_client" name="test_client__blocked_list" time="0.029" /><testcase classname="tests.unit_tests.test_client" name="test_client__trophy_summary" time="0.026" /><testcase classname="tests.unit_tests.test_client" name="test_client__trophy_titles" time="0.027" /><testcase classname="tests.unit_tests.test_client" name="test_client__trophy_titles_for_title" time="0.026" /><testcase classname="tests.unit_tests.test_client" name="test_client__trophies" time="0.051" /><testcase classname="tests.unit_tests.test_client" name="test_client__trophy_groups_summary" time="0.048" /><testcase classname="tests.unit_tests.test_client" name="test_client__title_stats" time="0.026"><failure message="TypeError: '&lt;=' not supported between instances of 'NoneType' and 'int'">psnawp_fixture = &lt;psnawp_api.psnawp.PSNAWP object at 0x7fc788128510&gt;

    @pytest.mark.vcr()
    def test_client__title_stats(psnawp_fixture):
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
&gt;           for title in psnawp_fixture.me().title_stats():

tests/unit_tests/test_client.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'psnawp_api.models.title_stats.TitleStats'&gt;
request_builder = &lt;psnawp_api.utils.request_builder.RequestBuilder object at 0x7fc788113b90&gt;
account_id = 'me', limit = None

    @classmethod
    def from_endpoint(cls, request_builder: RequestBuilder, account_id: str, limit: Optional[int]) -&gt; Iterator[TitleStats]:
    
        offset = 0
        limit_per_page = min(limit, 1000) if limit is not None else 1000
        params: dict[str, Any] = {"categories": "ps4_game,ps5_native_game", "limit": limit_per_page, "offset": offset}
    
        total_items = 0
        while True:
            params["offset"] = offset
            try:
                response = request_builder.get(
                    url=f"{BASE_PATH['games_list']}{API_PATH['user_game_data'].format(account_id=account_id)}",
                    params=params,
                ).json()
            except PSNAWPForbidden as forbidden:
                raise PSNAWPForbidden("The following user has made their profile private.") from forbidden
    
            titles: list[dict[str, Any]] = response.get("titles")
    
            for title in titles:
                title_instance = TitleStats.from_dict({**title, "totalItemCount": response.get("totalItemCount")})
                yield title_instance
                total_items += 1
    
            if limit is not None:
                limit -= total_items
                params["limit"] = min(limit, limit_per_page)
    
                # If limit is reached
                if limit &lt;= 0:
                    break
    
            offset = response.get("nextOffset", 0)
            # If there is not more offset, we've reached the end
&gt;           if offset &lt;= 0:
E           TypeError: '&lt;=' not supported between instances of 'NoneType' and 'int'

/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/psnawp_api/models/title_stats.py:99: TypeError</failure></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__repr_and_str" time="0.134" /><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__np_communication_id" time="0.029" /><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__wrong_title_id" time="0.026" /><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__get_title_details" time="0.040" /><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophies" time="0.042" /><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophy_groups_summary" time="0.037" /><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophies_game_not_owned_by_user" time="0.026" /><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophy_groups_summary_game_not_owned_by_user" time="0.026" /><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophies_invalid_np_communication_id" time="0.025" /><testcase classname="tests.unit_tests.test_game_title" name="test_game_title__trophy_groups_summary_invalid_np_communication_id" time="0.026" /><testcase classname="tests.unit_tests.test_group" name="test_group__group_incorrect_args" time="0.015" /><testcase classname="tests.unit_tests.test_group" name="test_group__group_with_wrong_id" time="0.026" /><testcase classname="tests.unit_tests.test_group" name="test_group__group_with_users" time="0.072" /><testcase classname="tests.unit_tests.test_group" name="test_group__group_with_id" time="0.065" /><testcase classname="tests.unit_tests.test_group" name="test_group__repr_and_str" time="0.038" /><testcase classname="tests.unit_tests.test_group" name="test_group__change_name_dm" time="0.066" /><testcase classname="tests.unit_tests.test_group" name="test_group__dming_blocked_user" time="0.047" /><testcase classname="tests.unit_tests.test_group" name="test_group__change_name" time="0.062" /><testcase classname="tests.unit_tests.test_group" name="test_group__leave_group" time="0.068" /><testcase classname="tests.unit_tests.test_search" name="test_search__universal_search" time="0.029" /><testcase classname="tests.unit_tests.test_search" name="test_search__get_title_id" time="0.049" /><testcase classname="tests.unit_tests.test_search" name="test_search__get_title_id_wrong_title" time="0.026" /><testcase classname="tests.unit_tests.test_user" name="test_user__user" time="0.028" /><testcase classname="tests.unit_tests.test_user" name="test_user__user_account_id" time="0.027" /><testcase classname="tests.unit_tests.test_user" name="test_user__user_no_argument" time="0.014" /><testcase classname="tests.unit_tests.test_user" name="test_user__user_wrong_acc_id" time="0.026" /><testcase classname="tests.unit_tests.test_user" name="test_user__prev_online_id" time="0.028" /><testcase classname="tests.unit_tests.test_user" name="test_user__user_not_found" time="0.029" /><testcase classname="tests.unit_tests.test_user" name="test_user__user_acct_id_not_found" time="0.027" /><testcase classname="tests.unit_tests.test_user" name="test_user__get_profile" time="0.037" /><testcase classname="tests.unit_tests.test_user" name="test_user__get_presence" time="0.041" /><testcase classname="tests.unit_tests.test_user" name="test_user__get_presence_forbidden" time="0.037" /><testcase classname="tests.unit_tests.test_user" name="test_user__friendship" time="0.037" /><testcase classname="tests.unit_tests.test_user" name="test_user__is_blocked" time="0.043" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_summary" time="0.040" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_summary_forbidden" time="0.035" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles" time="0.047" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles_forbidden" time="0.038" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles_pagination_test" time="0.114" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles_for_title" time="0.040" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_titles_for_title_forbidden" time="0.039" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophies" time="0.071" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophies_forbidden" time="0.073" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophies_pagination_test" time="0.075" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_groups_summary" time="0.074" /><testcase classname="tests.unit_tests.test_user" name="test_user__trophy_groups_summary_forbidden" time="0.075" /><testcase classname="tests.unit_tests.test_user" name="test_user__title_stats" time="0.132"><failure message="TypeError: '&lt;=' not supported between instances of 'NoneType' and 'int'">psnawp_fixture = &lt;psnawp_api.psnawp.PSNAWP object at 0x7fc788128510&gt;

    @pytest.mark.vcr()
    def test_user__title_stats(psnawp_fixture):
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
            total_count = 0
&gt;           for title in psnawp_fixture.user(online_id="jeranther").title_stats():

tests/unit_tests/test_user.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'psnawp_api.models.title_stats.TitleStats'&gt;
request_builder = &lt;psnawp_api.utils.request_builder.RequestBuilder object at 0x7fc788113b90&gt;
account_id = '1802043923080044300', limit = None

    @classmethod
    def from_endpoint(cls, request_builder: RequestBuilder, account_id: str, limit: Optional[int]) -&gt; Iterator[TitleStats]:
    
        offset = 0
        limit_per_page = min(limit, 1000) if limit is not None else 1000
        params: dict[str, Any] = {"categories": "ps4_game,ps5_native_game", "limit": limit_per_page, "offset": offset}
    
        total_items = 0
        while True:
            params["offset"] = offset
            try:
                response = request_builder.get(
                    url=f"{BASE_PATH['games_list']}{API_PATH['user_game_data'].format(account_id=account_id)}",
                    params=params,
                ).json()
            except PSNAWPForbidden as forbidden:
                raise PSNAWPForbidden("The following user has made their profile private.") from forbidden
    
            titles: list[dict[str, Any]] = response.get("titles")
    
            for title in titles:
                title_instance = TitleStats.from_dict({**title, "totalItemCount": response.get("totalItemCount")})
                yield title_instance
                total_items += 1
    
            if limit is not None:
                limit -= total_items
                params["limit"] = min(limit, limit_per_page)
    
                # If limit is reached
                if limit &lt;= 0:
                    break
    
            offset = response.get("nextOffset", 0)
            # If there is not more offset, we've reached the end
&gt;           if offset &lt;= 0:
E           TypeError: '&lt;=' not supported between instances of 'NoneType' and 'int'

/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/psnawp_api/models/title_stats.py:99: TypeError</failure></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__title_stats_with_limit" time="0.514" /><testcase classname="tests.unit_tests.test_user" name="test_user__repr_and_str" time="0.033" /><testcase classname="tests.unit_tests.test_utils_misc" name="test_play_duration_to_timedelta_valid_inputs" time="0.002" /><testcase classname="tests.unit_tests.test_utils_misc" name="test_play_duration_to_timedelta_invalid_inputs" time="0.004" /></testsuite></testsuites>